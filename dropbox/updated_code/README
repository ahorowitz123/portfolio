README



HOW TO RUN ON VM
Go to /root folder

--To Run Server
./server [base-dir] [address:port]

--To Run Client
./client [address:port]

--To Reset Server
./server [base-dir] --reset


Things we hand tested


Ensure prelogin commands do not work after login 
Ensure postlogin commands do not work before login
All postlogin commands must verify session token
Sharee can never upload, mkdir, rm, rmdir, share, or unshare, no crashes happen and can still cd out of the  in /shared/<owner>
Client nevers sees file checksums
Ensure get logged out when session token expires or if session token invalid
Ensure get logged out if username changes
Idk how to test this, cause idk how to change username -  probably better as a test file
Entering invalid/empty/incorrect verification code means registration fails
Can later reregister with same username and/or email
Verification code times out correctly
Cannot register with another user’s username or email
Ensure on client startup, c.session_token and c.username are empty
For all commands, ensure must have exactly the appropriate number of arguments, and that the types are valid. Also test with leading and trailing whitespace, and case sensitivity (should only be lowercase)
Prelogin
	help - no args
	register - no args
	login - no args
	exit - no args
	Everything else = invalid command
Post login
	help - no args
	logout - no args
	pwd - no args
	ls - no args
	cd <dir> 
	mkdir <dirname>
	rmdir <dirname>
	rm <filename>
	upload <src_filepath> <dest_filename>
	download <src_filename> <dest_filepath>
	cat <filename>
	share_r <file> <sharee_username>
	share_rw <file> <sharee_username>
	unshare <file> <sharee_username>
	modify <src_filepath> <dest_filename>
	delete_acct - no args
	ls_sharees <file>
	chmod_r <file> <sharee_username>
	chmod_rw <file> <sharee_username>
Signals
	Piazza said we didn’t need to deal with, but they do cause the session token to be stored server side when it shouldn’t be
Ctrl-D
	When logged in
	When not logged in
Working directory printed at prompt only when logged in
help
	Not logged in only lists prelogin commands
	After log in only lists postlogin commands
register
	Valid username
	Valid email
	Passwords match
	Verification code matches
Login
	Valid username
	Valid password
	username/password combo matches db
Exit
Pwd
	Valid username
	Returns valid paths only
	Returns current users path
	Does not return another user’s path
	Works in shared directory
	Cannot see actual filepath of file if sharee
ls
	Only prints file and directories of current directory
	Does not print deleted files/directories
	Works with shared files
	Does not print shared files after they have been unshared
Cd
	Can handle valid directories/paths
	Does not cd into files
	Handles invalid directories/paths
Mkdir
	Can make new subdirectory in working directory
	Can name directory same as file with no problems
	Cannot make directory if one currently exists in same directory
	No problem if one exists in different directory
	Valid directory name
Rmdir
	Valid directory name
	Cannot remove non existent directory
	Cannot remove file
	Can only remove empty directory
Rm
	Valid filename
	Cannot remove another user’s file
	Cannot remove file shared with you
	Cannot remove file you shared with others
	If others upload same file, then removes it from your files but not from deduplicated
	If others have not uploaded the same file, removes the actual file from deduplicated
Upload
	Errors gracefully if invalid src filepath
	Upload works for local directory or absolute path
	Cannot upload if existing filename
	Can upload if existing dirname
	If others previously uploaded the same file, then does not affect deduplicated area
	If not, then it does update deduplicated to have this file
Download
	Errors gracefully if invalid place to write file to locally
	Cannot download directory
	Can download shared file only if have read permission
	Can download file if in current directory or by absolute path
Cat
	Cat binary works
	Cannot cat directory
	Can cat by current directory or absolute path
	Can cat shared file only if have read permission
Share_r
	Can reference file by absolute path or within current directory
	Cannot share directory
	Cannot share file not owned by you
	Sharee username must exist
	Sharee does not have write permissions
	File put in sharee’s shared directory, under /shared/<owner>
Share_rw
	Can reference file by absolute path or within current directory
	Cannot share directory
	Cannot share file not owned by you
	Sharee username must exist
	Sharee does have write permissions
	File put in sharee’s shared directory, under /shared/<owner>
Unshare
	File must be owned by you
	Can reference file by absolute path or within current directory
	Sharee username must exist
	File must have been previously shared with sharee
	Sharee can not read or write to file after
	Sharee does not see file after in /shared/<owner>
	If no other files shared by owner to sharee, then /shared/<owner> directory no longer exiss
		If sharee was in working directory of /shared/<owner> when it is deleted
			No crashes happen
			Sharee can cd out of that directory
			Sharee sees no files
			Sharee cannot cat, download, or modify previously existing directory
Modify
	Errors gracefully if invalid place to upload new version from locally
	Filename exists on server
	File either owned by user or user has shared write permissions
	Filename does not change
	Checksum changes only for those in shared group
		If another user has original checksum after updates to checksum for shared group, then the original file not deleted from deduplicated area
			Else, if no one else needs it, file deleted from deduplicated area
		Owner and user with write permissions are only ones who can modify shared directory
		User with read permission cannot modify, but will be able to see changes
	Can modify file to same version
	TODO: Check all edge cases listed
Delete_acct
	Cannot delete account if own files or directories
	All files shared by others with the user are removed from shared table
	Does not affect deduplicated because user deleting account is not owner
	User removed from users table
	Directories table no longer has / and /shared/
	Shared table has nothing owned by or shared with user
	Can only be called from directory
Ls_sharees
	Can only view sharees of file you own
	Cannot view sharees of file shared with you
	Cannot view sharees on directory
	Valid filename
	File must exist
Chmod_r
	You must be owner of file
	Sharee username must exist
	File must be shared with user
	Valid filename
	File must exist
	If sharee only had read permissions before, nothing changes
	If sharee had write permissions before, they now do not
	Sharee still sees file in /shared/<owner>
	User cannot modify file
	cat/download work as normal
Chmod_rw
	You must be owner of file
	Sharee username must exist
	File must be shared with user
	Valid filename
	File must exist
	If sharee only had read permissions before, they now have write permission also
	If sharee had write permissions before, nothing changes
	Sharee still sees file in /shared/<owner>
	User can now modify file
	cat/download work as normal

Edge Cases We Checked For All Commands
	User with two files with same content but different names
	User with two files in different directories with same name
	Sharing
		User shared multiple files with one user
		User shared multiple files with the same name with one user - We do not allow this
	Deduplication
		User modified/removed file that other user is still using
		User modified/removed file that another user is using
		User modified file that was shared that another user was using
		User modified/removed file that no one else was using

We also tested our caps on amount of users, file size, and size per user by making them very small.



Things We Changed From Design Doc

We decided to put everything in a database. Originally, we were going to make an extra directory but now that is stored completely in the database. We have a table for users, files, directories, and shares. We also added some functions such as ls and chmod. We changed the way we shared. Rather than having a write only share, we only allow read only and read and write.


Vulnerabilites We Found During Testing

We changed lots of error messages to generic ones that were giving too much information. 
We realized our server and database functions were in the main package and could be called by the client. We moved these to a server package and made every function private except for an InitServer function that takes in nothing and returns nothing. This way the client has no access to the database or the server. 
We realized that there were a bunch of edge cases above that were deleting files they were not supposed to be deleted or not deleting them when they should be. Also, modifying a shared file when the owner has two files with that checksum would modify both of them. This required us looking at the owner's full path in the shared table to update the checksum.
